<?php



/**
 * Skeleton subclass for representing a row from the 'sf_blog_post' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.5 on:
 *
 * Mon 27 Dec 2010 07:15:57 PM WIT
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.plugins.sfSimpleBlog15Plugin.lib.model.plugin
 */
class PluginsfSimpleBlogPost extends BasesfSimpleBlogPost {
  protected $previousPublishedAt = null;
  protected $previousIsPublished = false;
  
  public function  getExtract()
  {
    //search for <p><!-- pagebreak --></p>
    $v = $this->getContent();
    if (false === $pos = stripos($v, '<p><!-- pagebreak -->'))
    {
      $pos = stripos($v, '<!-- pagebreak -->');
    }
    if ($pos !== false)
    {
      return substr($v, 0, $pos-1);
    }
    return $v;
  }

  public function setIsPublished($v)
  {
    $this->previousIsPublished = $this->getIsPublished();
    if (!$this->isNew()) {
      $this->previousPublishedAt = $this->getPublishedAt(null);
    }
    return parent::setIsPublished($v);
  }
  public function setInternalPublishedAt($v)
  {
    parent::setInternalPublishedAt($v);
    return $this->setPublishedAt($v);
  }

  public function  setPublishedAt($v)
  {
    return parent::setPublishedAt($v);
  }
  
  public function getAuthor(PropelPDO $con = null)
  {
    return $this->getsfGuardUser($con);
  }

  public function getAuthorName()
  {
    return $this->getAuthor()->getProfile()->getFullName();
  }
  
  public function getAuthorEmail()
  {
    return $this->getAuthor()->getProfile()->getEmail();
  }

  public function getAuthorWebsite()
  {
    return $this->getAuthor()->getProfile()->getWebsite();
  }

  public function setAuthor(sfGuardUser $v = null)
  {
    return $this->setsfGuardUser($v);
  }

  public function allowComments()
  {
    if ($this->getAllowComments())
    {
      $validity = sfConfig::get('app_sfSimpleBlog_comment_disable_after', 0);
      if ($validity == 0 || $this->getPublishedSinceDays() < $validity)
      {
        return true;
      }
    }

    return false;
  }

  public function getPublishedSinceDays()
  {
    return round((time() - $this->getPublishedAt('U')) / (24 * 60 * 60));
  }

  public function setTagsFromString($v)
  {
    $this->addTag($v);
    return $this;
  }

  public function getTagsAsString()
  {
    $tags = $this->getTags();
    return implode($tags, ', ');
  }

  public function getCategoriesAsString()
  {
    $postCategories = $this->getsfSimpleBlogCategorys();
    $categories = array();
    foreach ($postCategories as $postCategory)
    {
      $categories[] = (string) $postCategory;
    }
    if ($categories) return implode($categories, ', ');
    return '';
  }

  public function getPreviousPost()
  {
    return sfSimpleBlogPostQuery::create()
        ->previousPublished($this->getInternalPublishedAt())
        ->findOne();
  }

  public function getNextPost()
  {
    return sfSimpleBlogPostQuery::create()
        ->nextPublished($this->getInternalPublishedAt())
        ->findOne();
  }

  /* RSS Feed*/
  public function getFeedUniqueId()
  {
    return 'article '.$this->getId().' at '.$_SERVER['HTTP_HOST'];
  }

  public function getFeedLink()
  {
    return sfSimpleBlogTools::generatePostUri($this);
  }

  public function preSave(PropelPDO $con = null)
  {
    if ($this->isNew() && $this->getIsPublished()) {
      sfSimpleBlogArchivePeer::incrementCounter($this->getPublishedAt(), $con);
    }
    elseif (!$this->isNew())
    {
      if (!$this->getIsPublished())
      {
        if ($this->previousIsPublished)
        {
          //user unpublished an article
          sfSimpleBlogArchivePeer::decrementCounter($this->previousPublishedAt->format('Y-m-d'), $con);
        }
      }
      else
      {
        if (!$this->previousIsPublished)
        {
          //user published an article
          sfSimpleBlogArchivePeer::incrementCounter($this->getPublishedAt(), $con);
        }
        else
        {
          if (!($this->previousPublishedAt->format('n') == $this->getPublishedAt('n') && $this->previousPublishedAt->format('Y') == $this->getPublishedAt('Y')))
          {
            //user changed month or year published_at value
            sfSimpleBlogArchivePeer::decrementCounter($this->previousPublishedAt->format('Y-m-d'), $con);
            sfSimpleBlogArchivePeer::incrementCounter($this->getPublishedAt(), $con);
          }
        }
      }
    }
    return true;
  }

  public function postDelete(PropelPDO $con = null)
  {
    sfSimpleBlogArchivePeer::decrementCounter($this->getPublishedAt(), $con);
  }
} // sfSimpleBlogPost

sfPropelBehavior::add('sfSimpleBlogPost', array('sfPropelActAsTaggableBehavior'));
