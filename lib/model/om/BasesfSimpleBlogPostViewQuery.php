<?php


/**
 * Base class that represents a query for the 'sf_blog_post_view' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.0-dev on:
 *
 * Wed 26 Jan 2011 10:35:17 PM WIT
 *
 * @method     sfSimpleBlogPostViewQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     sfSimpleBlogPostViewQuery orderByTitle($order = Criteria::ASC) Order by the title column
 * @method     sfSimpleBlogPostViewQuery orderByStrippedTitle($order = Criteria::ASC) Order by the stripped_title column
 * @method     sfSimpleBlogPostViewQuery orderByIsPublished($order = Criteria::ASC) Order by the is_published column
 * @method     sfSimpleBlogPostViewQuery orderByPublishedAt($order = Criteria::ASC) Order by the published_at column
 * @method     sfSimpleBlogPostViewQuery orderByInternalPublishedAt($order = Criteria::ASC) Order by the internal_published_at column
 *
 * @method     sfSimpleBlogPostViewQuery groupById() Group by the id column
 * @method     sfSimpleBlogPostViewQuery groupByTitle() Group by the title column
 * @method     sfSimpleBlogPostViewQuery groupByStrippedTitle() Group by the stripped_title column
 * @method     sfSimpleBlogPostViewQuery groupByIsPublished() Group by the is_published column
 * @method     sfSimpleBlogPostViewQuery groupByPublishedAt() Group by the published_at column
 * @method     sfSimpleBlogPostViewQuery groupByInternalPublishedAt() Group by the internal_published_at column
 *
 * @method     sfSimpleBlogPostViewQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     sfSimpleBlogPostViewQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     sfSimpleBlogPostViewQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     sfSimpleBlogPostView findOne(PropelPDO $con = null) Return the first sfSimpleBlogPostView matching the query
 * @method     sfSimpleBlogPostView findOneOrCreate(PropelPDO $con = null) Return the first sfSimpleBlogPostView matching the query, or a new sfSimpleBlogPostView object populated from the query conditions when no match is found
 *
 * @method     sfSimpleBlogPostView findOneById(int $id) Return the first sfSimpleBlogPostView filtered by the id column
 * @method     sfSimpleBlogPostView findOneByTitle(string $title) Return the first sfSimpleBlogPostView filtered by the title column
 * @method     sfSimpleBlogPostView findOneByStrippedTitle(string $stripped_title) Return the first sfSimpleBlogPostView filtered by the stripped_title column
 * @method     sfSimpleBlogPostView findOneByIsPublished(boolean $is_published) Return the first sfSimpleBlogPostView filtered by the is_published column
 * @method     sfSimpleBlogPostView findOneByPublishedAt(string $published_at) Return the first sfSimpleBlogPostView filtered by the published_at column
 * @method     sfSimpleBlogPostView findOneByInternalPublishedAt(string $internal_published_at) Return the first sfSimpleBlogPostView filtered by the internal_published_at column
 *
 * @method     array findById(int $id) Return sfSimpleBlogPostView objects filtered by the id column
 * @method     array findByTitle(string $title) Return sfSimpleBlogPostView objects filtered by the title column
 * @method     array findByStrippedTitle(string $stripped_title) Return sfSimpleBlogPostView objects filtered by the stripped_title column
 * @method     array findByIsPublished(boolean $is_published) Return sfSimpleBlogPostView objects filtered by the is_published column
 * @method     array findByPublishedAt(string $published_at) Return sfSimpleBlogPostView objects filtered by the published_at column
 * @method     array findByInternalPublishedAt(string $internal_published_at) Return sfSimpleBlogPostView objects filtered by the internal_published_at column
 *
 * @package    propel.generator.plugins.sfSimpleBlog15Plugin.lib.model.om
 */
abstract class BasesfSimpleBlogPostViewQuery extends ModelCriteria
{

	// query_cache behavior
	protected $queryKey = '';

	/**
	 * Initializes internal state of BasesfSimpleBlogPostViewQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'sfSimpleBlogPostView', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new sfSimpleBlogPostViewQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    sfSimpleBlogPostViewQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof sfSimpleBlogPostViewQuery) {
			return $criteria;
		}
		$query = new sfSimpleBlogPostViewQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    sfSimpleBlogPostView|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = sfSimpleBlogPostViewPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    sfSimpleBlogPostViewQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(sfSimpleBlogPostViewPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    sfSimpleBlogPostViewQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(sfSimpleBlogPostViewPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     int|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleBlogPostViewQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(sfSimpleBlogPostViewPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the title column
	 * 
	 * @param     string $title The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleBlogPostViewQuery The current query, for fluid interface
	 */
	public function filterByTitle($title = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($title)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $title)) {
				$title = str_replace('*', '%', $title);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfSimpleBlogPostViewPeer::TITLE, $title, $comparison);
	}

	/**
	 * Filter the query on the stripped_title column
	 * 
	 * @param     string $strippedTitle The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleBlogPostViewQuery The current query, for fluid interface
	 */
	public function filterByStrippedTitle($strippedTitle = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($strippedTitle)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $strippedTitle)) {
				$strippedTitle = str_replace('*', '%', $strippedTitle);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfSimpleBlogPostViewPeer::STRIPPED_TITLE, $strippedTitle, $comparison);
	}

	/**
	 * Filter the query on the is_published column
	 * 
	 * @param     boolean|string $isPublished The value to use as filter.
	 *            Accepts strings ('false', 'off', '-', 'no', 'n', and '0' are false, the rest is true)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleBlogPostViewQuery The current query, for fluid interface
	 */
	public function filterByIsPublished($isPublished = null, $comparison = null)
	{
		if (is_string($isPublished)) {
			$is_published = in_array(strtolower($isPublished), array('false', 'off', '-', 'no', 'n', '0')) ? false : true;
		}
		return $this->addUsingAlias(sfSimpleBlogPostViewPeer::IS_PUBLISHED, $isPublished, $comparison);
	}

	/**
	 * Filter the query on the published_at column
	 * 
	 * @param     string|array $publishedAt The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleBlogPostViewQuery The current query, for fluid interface
	 */
	public function filterByPublishedAt($publishedAt = null, $comparison = null)
	{
		if (is_array($publishedAt)) {
			$useMinMax = false;
			if (isset($publishedAt['min'])) {
				$this->addUsingAlias(sfSimpleBlogPostViewPeer::PUBLISHED_AT, $publishedAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($publishedAt['max'])) {
				$this->addUsingAlias(sfSimpleBlogPostViewPeer::PUBLISHED_AT, $publishedAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfSimpleBlogPostViewPeer::PUBLISHED_AT, $publishedAt, $comparison);
	}

	/**
	 * Filter the query on the internal_published_at column
	 * 
	 * @param     string|array $internalPublishedAt The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleBlogPostViewQuery The current query, for fluid interface
	 */
	public function filterByInternalPublishedAt($internalPublishedAt = null, $comparison = null)
	{
		if (is_array($internalPublishedAt)) {
			$useMinMax = false;
			if (isset($internalPublishedAt['min'])) {
				$this->addUsingAlias(sfSimpleBlogPostViewPeer::INTERNAL_PUBLISHED_AT, $internalPublishedAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($internalPublishedAt['max'])) {
				$this->addUsingAlias(sfSimpleBlogPostViewPeer::INTERNAL_PUBLISHED_AT, $internalPublishedAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfSimpleBlogPostViewPeer::INTERNAL_PUBLISHED_AT, $internalPublishedAt, $comparison);
	}

	/**
	 * Exclude object from result
	 *
	 * @param     sfSimpleBlogPostView $sfSimpleBlogPostView Object to remove from the list of results
	 *
	 * @return    sfSimpleBlogPostViewQuery The current query, for fluid interface
	 */
	public function prune($sfSimpleBlogPostView = null)
	{
		if ($sfSimpleBlogPostView) {
			$this->addUsingAlias(sfSimpleBlogPostViewPeer::ID, $sfSimpleBlogPostView->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

	// query_cache behavior
	
	public function setQueryKey($key)
	{
		$this->queryKey = $key;
		return $this;
	}
	
	public function getQueryKey()
	{
		return $this->queryKey;
	}
	
	public function cacheContains($key)
	{
		return apc_fetch($key);
	}
	
	public function cacheFetch($key)
	{
		return apc_fetch($key);
	}
	
	public function cacheStore($key, $value, $lifetime = 3600)
	{
		apc_store($key, $value, $lifetime);
	}
	
	protected function getSelectStatement($con = null)
	{
		$dbMap = Propel::getDatabaseMap(sfSimpleBlogPostViewPeer::DATABASE_NAME);
		$db = Propel::getDB(sfSimpleBlogPostViewPeer::DATABASE_NAME);
	  if ($con === null) {
			$con = Propel::getConnection(sfSimpleBlogPostViewPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		
		if (!$this->hasSelectClause()) {
			$this->addSelfSelectColumns();
		}
	
	  $this->configureSelectColumns();
	  
		$con->beginTransaction();
		try {
			$this->basePreSelect($con);
			$key = $this->getQueryKey();
			if ($key && $this->cacheContains($key)) {
				$params = $this->getParams();
				$sql = $this->cacheFetch($key);
			} else {
				$params = array();
				$sql = BasePeer::createSelectSql($this, $params);
				if ($key) {
					$this->cacheStore($key, $sql);
				}
			}
			$stmt = $con->prepare($sql);
			$db->bindValues($stmt, $params, $dbMap);
			$stmt->execute();
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
		
		return $stmt;
	}
	
	protected function getCountStatement($con = null)
	{
		$dbMap = Propel::getDatabaseMap($this->getDbName());
		$db = Propel::getDB($this->getDbName());
	  if ($con === null) {
			$con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
		}
	
		$con->beginTransaction();
		try {
			$this->basePreSelect($con);
			$key = $this->getQueryKey();
			if ($key && $this->cacheContains($key)) {
				$params = $this->getParams();
				$sql = $this->cacheFetch($key);
			} else {
				if (!$this->hasSelectClause() && !$this->getPrimaryCriteria()) {
					$this->addSelfSelectColumns();
				}
				$params = array();
				$needsComplexCount = $this->getGroupByColumns()
					|| $this->getOffset()
					|| $this->getLimit()
					|| $this->getHaving()
					|| in_array(Criteria::DISTINCT, $this->getSelectModifiers());
				if ($needsComplexCount) {
					if (BasePeer::needsSelectAliases($this)) {
						if ($this->getHaving()) {
							throw new PropelException('Propel cannot create a COUNT query when using HAVING and  duplicate column names in the SELECT part');
						}
						$db->turnSelectColumnsToAliases($this);
					}
					$selectSql = BasePeer::createSelectSql($this, $params);
					$sql = 'SELECT COUNT(*) FROM (' . $selectSql . ') propelmatch4cnt';
				} else {
					// Replace SELECT columns with COUNT(*)
					$this->clearSelectColumns()->addSelectColumn('COUNT(*)');
					$sql = BasePeer::createSelectSql($this, $params);
				}
				if ($key) {
					$this->cacheStore($key, $sql);
				}
			}
			$stmt = $con->prepare($sql);
			$db->bindValues($stmt, $params, $dbMap);
			$stmt->execute();
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	
		return $stmt;
	}

} // BasesfSimpleBlogPostViewQuery
