<?php


/**
 * Base class that represents a query for the 'sf_blog_post_category' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.0-dev on:
 *
 * Wed 26 Jan 2011 10:35:17 PM WIT
 *
 * @method     sfSimpleBlogPostCategoryQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     sfSimpleBlogPostCategoryQuery orderByCategoryId($order = Criteria::ASC) Order by the category_id column
 * @method     sfSimpleBlogPostCategoryQuery orderBySfBlogPostId($order = Criteria::ASC) Order by the sf_blog_post_id column
 *
 * @method     sfSimpleBlogPostCategoryQuery groupById() Group by the id column
 * @method     sfSimpleBlogPostCategoryQuery groupByCategoryId() Group by the category_id column
 * @method     sfSimpleBlogPostCategoryQuery groupBySfBlogPostId() Group by the sf_blog_post_id column
 *
 * @method     sfSimpleBlogPostCategoryQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     sfSimpleBlogPostCategoryQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     sfSimpleBlogPostCategoryQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     sfSimpleBlogPostCategoryQuery leftJoinsfSimpleBlogCategory($relationAlias = null) Adds a LEFT JOIN clause to the query using the sfSimpleBlogCategory relation
 * @method     sfSimpleBlogPostCategoryQuery rightJoinsfSimpleBlogCategory($relationAlias = null) Adds a RIGHT JOIN clause to the query using the sfSimpleBlogCategory relation
 * @method     sfSimpleBlogPostCategoryQuery innerJoinsfSimpleBlogCategory($relationAlias = null) Adds a INNER JOIN clause to the query using the sfSimpleBlogCategory relation
 *
 * @method     sfSimpleBlogPostCategoryQuery leftJoinsfSimpleBlogPost($relationAlias = null) Adds a LEFT JOIN clause to the query using the sfSimpleBlogPost relation
 * @method     sfSimpleBlogPostCategoryQuery rightJoinsfSimpleBlogPost($relationAlias = null) Adds a RIGHT JOIN clause to the query using the sfSimpleBlogPost relation
 * @method     sfSimpleBlogPostCategoryQuery innerJoinsfSimpleBlogPost($relationAlias = null) Adds a INNER JOIN clause to the query using the sfSimpleBlogPost relation
 *
 * @method     sfSimpleBlogPostCategory findOne(PropelPDO $con = null) Return the first sfSimpleBlogPostCategory matching the query
 * @method     sfSimpleBlogPostCategory findOneOrCreate(PropelPDO $con = null) Return the first sfSimpleBlogPostCategory matching the query, or a new sfSimpleBlogPostCategory object populated from the query conditions when no match is found
 *
 * @method     sfSimpleBlogPostCategory findOneById(int $id) Return the first sfSimpleBlogPostCategory filtered by the id column
 * @method     sfSimpleBlogPostCategory findOneByCategoryId(int $category_id) Return the first sfSimpleBlogPostCategory filtered by the category_id column
 * @method     sfSimpleBlogPostCategory findOneBySfBlogPostId(int $sf_blog_post_id) Return the first sfSimpleBlogPostCategory filtered by the sf_blog_post_id column
 *
 * @method     array findById(int $id) Return sfSimpleBlogPostCategory objects filtered by the id column
 * @method     array findByCategoryId(int $category_id) Return sfSimpleBlogPostCategory objects filtered by the category_id column
 * @method     array findBySfBlogPostId(int $sf_blog_post_id) Return sfSimpleBlogPostCategory objects filtered by the sf_blog_post_id column
 *
 * @package    propel.generator.plugins.sfSimpleBlog15Plugin.lib.model.om
 */
abstract class BasesfSimpleBlogPostCategoryQuery extends ModelCriteria
{

	// query_cache behavior
	protected $queryKey = '';

	/**
	 * Initializes internal state of BasesfSimpleBlogPostCategoryQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'sfSimpleBlogPostCategory', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new sfSimpleBlogPostCategoryQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    sfSimpleBlogPostCategoryQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof sfSimpleBlogPostCategoryQuery) {
			return $criteria;
		}
		$query = new sfSimpleBlogPostCategoryQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * <code>
	 * $obj = $c->findPk(array(12, 34, 56), $con);
	 * </code>
	 * @param     array[$id, $category_id, $sf_blog_post_id] $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    sfSimpleBlogPostCategory|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = sfSimpleBlogPostCategoryPeer::getInstanceFromPool(serialize(array((string) $key[0], (string) $key[1], (string) $key[2]))))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(array(12, 56), array(832, 123), array(123, 456)), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    sfSimpleBlogPostCategoryQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		$this->addUsingAlias(sfSimpleBlogPostCategoryPeer::ID, $key[0], Criteria::EQUAL);
		$this->addUsingAlias(sfSimpleBlogPostCategoryPeer::CATEGORY_ID, $key[1], Criteria::EQUAL);
		$this->addUsingAlias(sfSimpleBlogPostCategoryPeer::SF_BLOG_POST_ID, $key[2], Criteria::EQUAL);
		
		return $this;
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    sfSimpleBlogPostCategoryQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		if (empty($keys)) {
			return $this->add(null, '1<>1', Criteria::CUSTOM);
		}
		foreach ($keys as $key) {
			$cton0 = $this->getNewCriterion(sfSimpleBlogPostCategoryPeer::ID, $key[0], Criteria::EQUAL);
			$cton1 = $this->getNewCriterion(sfSimpleBlogPostCategoryPeer::CATEGORY_ID, $key[1], Criteria::EQUAL);
			$cton0->addAnd($cton1);
			$cton2 = $this->getNewCriterion(sfSimpleBlogPostCategoryPeer::SF_BLOG_POST_ID, $key[2], Criteria::EQUAL);
			$cton0->addAnd($cton2);
			$this->addOr($cton0);
		}
		
		return $this;
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     int|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleBlogPostCategoryQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(sfSimpleBlogPostCategoryPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the category_id column
	 * 
	 * @param     int|array $categoryId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleBlogPostCategoryQuery The current query, for fluid interface
	 */
	public function filterByCategoryId($categoryId = null, $comparison = null)
	{
		if (is_array($categoryId) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(sfSimpleBlogPostCategoryPeer::CATEGORY_ID, $categoryId, $comparison);
	}

	/**
	 * Filter the query on the sf_blog_post_id column
	 * 
	 * @param     int|array $sfBlogPostId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleBlogPostCategoryQuery The current query, for fluid interface
	 */
	public function filterBySfBlogPostId($sfBlogPostId = null, $comparison = null)
	{
		if (is_array($sfBlogPostId) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(sfSimpleBlogPostCategoryPeer::SF_BLOG_POST_ID, $sfBlogPostId, $comparison);
	}

	/**
	 * Filter the query by a related sfSimpleBlogCategory object
	 *
	 * @param     sfSimpleBlogCategory|PropelCollection $sfSimpleBlogCategory The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleBlogPostCategoryQuery The current query, for fluid interface
	 */
	public function filterBysfSimpleBlogCategory($sfSimpleBlogCategory, $comparison = null)
	{
		if ($sfSimpleBlogCategory instanceof sfSimpleBlogCategory) {
			return $this
				->addUsingAlias(sfSimpleBlogPostCategoryPeer::CATEGORY_ID, $sfSimpleBlogCategory->getId(), $comparison);
		} elseif ($sfSimpleBlogCategory instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(sfSimpleBlogPostCategoryPeer::CATEGORY_ID, $sfSimpleBlogCategory->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterBysfSimpleBlogCategory() only accepts arguments of type sfSimpleBlogCategory or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the sfSimpleBlogCategory relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfSimpleBlogPostCategoryQuery The current query, for fluid interface
	 */
	public function joinsfSimpleBlogCategory($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('sfSimpleBlogCategory');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'sfSimpleBlogCategory');
		}
		
		return $this;
	}

	/**
	 * Use the sfSimpleBlogCategory relation sfSimpleBlogCategory object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfSimpleBlogCategoryQuery A secondary query class using the current class as primary query
	 */
	public function usesfSimpleBlogCategoryQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinsfSimpleBlogCategory($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'sfSimpleBlogCategory', 'sfSimpleBlogCategoryQuery');
	}

	/**
	 * Filter the query by a related sfSimpleBlogPost object
	 *
	 * @param     sfSimpleBlogPost|PropelCollection $sfSimpleBlogPost The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleBlogPostCategoryQuery The current query, for fluid interface
	 */
	public function filterBysfSimpleBlogPost($sfSimpleBlogPost, $comparison = null)
	{
		if ($sfSimpleBlogPost instanceof sfSimpleBlogPost) {
			return $this
				->addUsingAlias(sfSimpleBlogPostCategoryPeer::SF_BLOG_POST_ID, $sfSimpleBlogPost->getId(), $comparison);
		} elseif ($sfSimpleBlogPost instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(sfSimpleBlogPostCategoryPeer::SF_BLOG_POST_ID, $sfSimpleBlogPost->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterBysfSimpleBlogPost() only accepts arguments of type sfSimpleBlogPost or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the sfSimpleBlogPost relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfSimpleBlogPostCategoryQuery The current query, for fluid interface
	 */
	public function joinsfSimpleBlogPost($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('sfSimpleBlogPost');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'sfSimpleBlogPost');
		}
		
		return $this;
	}

	/**
	 * Use the sfSimpleBlogPost relation sfSimpleBlogPost object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfSimpleBlogPostQuery A secondary query class using the current class as primary query
	 */
	public function usesfSimpleBlogPostQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinsfSimpleBlogPost($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'sfSimpleBlogPost', 'sfSimpleBlogPostQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     sfSimpleBlogPostCategory $sfSimpleBlogPostCategory Object to remove from the list of results
	 *
	 * @return    sfSimpleBlogPostCategoryQuery The current query, for fluid interface
	 */
	public function prune($sfSimpleBlogPostCategory = null)
	{
		if ($sfSimpleBlogPostCategory) {
			$this->addCond('pruneCond0', $this->getAliasedColName(sfSimpleBlogPostCategoryPeer::ID), $sfSimpleBlogPostCategory->getId(), Criteria::NOT_EQUAL);
			$this->addCond('pruneCond1', $this->getAliasedColName(sfSimpleBlogPostCategoryPeer::CATEGORY_ID), $sfSimpleBlogPostCategory->getCategoryId(), Criteria::NOT_EQUAL);
			$this->addCond('pruneCond2', $this->getAliasedColName(sfSimpleBlogPostCategoryPeer::SF_BLOG_POST_ID), $sfSimpleBlogPostCategory->getSfBlogPostId(), Criteria::NOT_EQUAL);
			$this->combine(array('pruneCond0', 'pruneCond1', 'pruneCond2'), Criteria::LOGICAL_OR);
	  }
	  
		return $this;
	}

	// query_cache behavior
	
	public function setQueryKey($key)
	{
		$this->queryKey = $key;
		return $this;
	}
	
	public function getQueryKey()
	{
		return $this->queryKey;
	}
	
	public function cacheContains($key)
	{
		return apc_fetch($key);
	}
	
	public function cacheFetch($key)
	{
		return apc_fetch($key);
	}
	
	public function cacheStore($key, $value, $lifetime = 3600)
	{
		apc_store($key, $value, $lifetime);
	}
	
	protected function getSelectStatement($con = null)
	{
		$dbMap = Propel::getDatabaseMap(sfSimpleBlogPostCategoryPeer::DATABASE_NAME);
		$db = Propel::getDB(sfSimpleBlogPostCategoryPeer::DATABASE_NAME);
	  if ($con === null) {
			$con = Propel::getConnection(sfSimpleBlogPostCategoryPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		
		if (!$this->hasSelectClause()) {
			$this->addSelfSelectColumns();
		}
	
	  $this->configureSelectColumns();
	  
		$con->beginTransaction();
		try {
			$this->basePreSelect($con);
			$key = $this->getQueryKey();
			if ($key && $this->cacheContains($key)) {
				$params = $this->getParams();
				$sql = $this->cacheFetch($key);
			} else {
				$params = array();
				$sql = BasePeer::createSelectSql($this, $params);
				if ($key) {
					$this->cacheStore($key, $sql);
				}
			}
			$stmt = $con->prepare($sql);
			$db->bindValues($stmt, $params, $dbMap);
			$stmt->execute();
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
		
		return $stmt;
	}
	
	protected function getCountStatement($con = null)
	{
		$dbMap = Propel::getDatabaseMap($this->getDbName());
		$db = Propel::getDB($this->getDbName());
	  if ($con === null) {
			$con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
		}
	
		$con->beginTransaction();
		try {
			$this->basePreSelect($con);
			$key = $this->getQueryKey();
			if ($key && $this->cacheContains($key)) {
				$params = $this->getParams();
				$sql = $this->cacheFetch($key);
			} else {
				if (!$this->hasSelectClause() && !$this->getPrimaryCriteria()) {
					$this->addSelfSelectColumns();
				}
				$params = array();
				$needsComplexCount = $this->getGroupByColumns()
					|| $this->getOffset()
					|| $this->getLimit()
					|| $this->getHaving()
					|| in_array(Criteria::DISTINCT, $this->getSelectModifiers());
				if ($needsComplexCount) {
					if (BasePeer::needsSelectAliases($this)) {
						if ($this->getHaving()) {
							throw new PropelException('Propel cannot create a COUNT query when using HAVING and  duplicate column names in the SELECT part');
						}
						$db->turnSelectColumnsToAliases($this);
					}
					$selectSql = BasePeer::createSelectSql($this, $params);
					$sql = 'SELECT COUNT(*) FROM (' . $selectSql . ') propelmatch4cnt';
				} else {
					// Replace SELECT columns with COUNT(*)
					$this->clearSelectColumns()->addSelectColumn('COUNT(*)');
					$sql = BasePeer::createSelectSql($this, $params);
				}
				if ($key) {
					$this->cacheStore($key, $sql);
				}
			}
			$stmt = $con->prepare($sql);
			$db->bindValues($stmt, $params, $dbMap);
			$stmt->execute();
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	
		return $stmt;
	}

} // BasesfSimpleBlogPostCategoryQuery
