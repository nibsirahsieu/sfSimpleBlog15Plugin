<?php


/**
 * Base class that represents a row from the 'sf_blog_post' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.0-dev on:
 *
 * Wed 26 Jan 2011 10:35:17 PM WIT
 *
 * @package    propel.generator.plugins.sfSimpleBlog15Plugin.lib.model.om
 */
abstract class BasesfSimpleBlogPost extends BaseObject  implements Persistent
{

	/**
	 * Peer class name
	 */
	const PEER = 'sfSimpleBlogPostPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        sfSimpleBlogPostPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the author_id field.
	 * @var        int
	 */
	protected $author_id;

	/**
	 * The value for the title field.
	 * @var        string
	 */
	protected $title;

	/**
	 * The value for the stripped_title field.
	 * @var        string
	 */
	protected $stripped_title;

	/**
	 * The value for the content field.
	 * @var        string
	 */
	protected $content;

	/**
	 * The value for the is_published field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_published;

	/**
	 * The value for the allow_comments field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $allow_comments;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * Whether the lazy-loaded $updated_at value has been loaded from database.
	 * This is necessary to avoid repeated lookups if $updated_at column is NULL in the db.
	 * @var        boolean
	 */
	protected $updated_at_isLoaded = false;

	/**
	 * The value for the published_at field.
	 * @var        string
	 */
	protected $published_at;

	/**
	 * The value for the internal_published_at field.
	 * @var        string
	 */
	protected $internal_published_at;

	/**
	 * The value for the version field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $version;

	/**
	 * @var        sfGuardUser
	 */
	protected $asfGuardUser;

	/**
	 * @var        array sfSimpleBlogPostCategory[] Collection to store aggregation of sfSimpleBlogPostCategory objects.
	 */
	protected $collsfSimpleBlogPostCategorys;

	/**
	 * @var        array sfSimpleBlogPostVersion[] Collection to store aggregation of sfSimpleBlogPostVersion objects.
	 */
	protected $collsfSimpleBlogPostVersions;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// commentable behavior
	
	/**
	 * @var   an object to hold comments count model
	 */
	 protected $aCommentCounter;
	 
	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->is_published = false;
		$this->allow_comments = true;
		$this->version = 1;
	}

	/**
	 * Initializes internal state of BasesfSimpleBlogPost object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [author_id] column value.
	 * 
	 * @return     int
	 */
	public function getAuthorId()
	{
		return $this->author_id;
	}

	/**
	 * Get the [title] column value.
	 * 
	 * @return     string
	 */
	public function getTitle()
	{
		return $this->title;
	}

	/**
	 * Get the [stripped_title] column value.
	 * 
	 * @return     string
	 */
	public function getStrippedTitle()
	{
		return $this->stripped_title;
	}

	/**
	 * Get the [content] column value.
	 * 
	 * @return     string
	 */
	public function getContent()
	{
		return $this->content;
	}

	/**
	 * Get the [is_published] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsPublished()
	{
		return $this->is_published;
	}

	/**
	 * Get the [allow_comments] column value.
	 * 
	 * @return     boolean
	 */
	public function getAllowComments()
	{
		return $this->allow_comments;
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s', $con = null)
	{
		if (!$this->updated_at_isLoaded && $this->updated_at === null && !$this->isNew()) {
			$this->loadUpdatedAt($con);
		}

		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Load the value for the lazy-loaded [updated_at] column.
	 *
	 * This method performs an additional query to return the value for
	 * the [updated_at] column, since it is not populated by
	 * the hydrate() method.
	 *
	 * @param      $con PropelPDO (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - any underlying error will be wrapped and re-thrown.
	 */
	protected function loadUpdatedAt(PropelPDO $con = null)
	{
		$c = $this->buildPkeyCriteria();
		$c->addSelectColumn(sfSimpleBlogPostPeer::UPDATED_AT);
		try {
			$stmt = sfSimpleBlogPostPeer::doSelectStmt($c, $con);
			$row = $stmt->fetch(PDO::FETCH_NUM);
			$stmt->closeCursor();
			$this->updated_at = ($row[0] !== null) ? (string) $row[0] : null;
			$this->updated_at_isLoaded = true;
		} catch (Exception $e) {
			throw new PropelException("Error loading value for [updated_at] column on demand.", $e);
		}
	}
	/**
	 * Get the [optionally formatted] temporal [published_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getPublishedAt($format = 'Y-m-d')
	{
		if ($this->published_at === null) {
			return null;
		}


		if ($this->published_at === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->published_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->published_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [internal_published_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getInternalPublishedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->internal_published_at === null) {
			return null;
		}


		if ($this->internal_published_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->internal_published_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->internal_published_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [version] column value.
	 * 
	 * @return     int
	 */
	public function getVersion()
	{
		return $this->version;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     sfSimpleBlogPost The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = sfSimpleBlogPostPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [author_id] column.
	 * 
	 * @param      int $v new value
	 * @return     sfSimpleBlogPost The current object (for fluent API support)
	 */
	public function setAuthorId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->author_id !== $v) {
			$this->author_id = $v;
			$this->modifiedColumns[] = sfSimpleBlogPostPeer::AUTHOR_ID;
		}

		if ($this->asfGuardUser !== null && $this->asfGuardUser->getId() !== $v) {
			$this->asfGuardUser = null;
		}

		return $this;
	} // setAuthorId()

	/**
	 * Set the value of [title] column.
	 * 
	 * @param      string $v new value
	 * @return     sfSimpleBlogPost The current object (for fluent API support)
	 */
	public function setTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->title !== $v) {
			$this->title = $v;
			$this->modifiedColumns[] = sfSimpleBlogPostPeer::TITLE;
		}

		return $this;
	} // setTitle()

	/**
	 * Set the value of [stripped_title] column.
	 * 
	 * @param      string $v new value
	 * @return     sfSimpleBlogPost The current object (for fluent API support)
	 */
	public function setStrippedTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->stripped_title !== $v) {
			$this->stripped_title = $v;
			$this->modifiedColumns[] = sfSimpleBlogPostPeer::STRIPPED_TITLE;
		}

		return $this;
	} // setStrippedTitle()

	/**
	 * Set the value of [content] column.
	 * 
	 * @param      string $v new value
	 * @return     sfSimpleBlogPost The current object (for fluent API support)
	 */
	public function setContent($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->content !== $v) {
			$this->content = $v;
			$this->modifiedColumns[] = sfSimpleBlogPostPeer::CONTENT;
		}

		return $this;
	} // setContent()

	/**
	 * Set the value of [is_published] column.
	 * 
	 * @param      boolean $v new value
	 * @return     sfSimpleBlogPost The current object (for fluent API support)
	 */
	public function setIsPublished($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_published !== $v || $this->isNew()) {
			$this->is_published = $v;
			$this->modifiedColumns[] = sfSimpleBlogPostPeer::IS_PUBLISHED;
		}

		return $this;
	} // setIsPublished()

	/**
	 * Set the value of [allow_comments] column.
	 * 
	 * @param      boolean $v new value
	 * @return     sfSimpleBlogPost The current object (for fluent API support)
	 */
	public function setAllowComments($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->allow_comments !== $v || $this->isNew()) {
			$this->allow_comments = $v;
			$this->modifiedColumns[] = sfSimpleBlogPostPeer::ALLOW_COMMENTS;
		}

		return $this;
	} // setAllowComments()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     sfSimpleBlogPost The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// explicitly set the is-loaded flag to true for this lazy load col;
		// it doesn't matter if the value is actually set or not (logic below) as
		// any attempt to set the value means that no db lookup should be performed
		// when the getUpdatedAt() method is called.
		$this->updated_at_isLoaded = true;

		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = sfSimpleBlogPostPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Sets the value of [published_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     sfSimpleBlogPost The current object (for fluent API support)
	 */
	public function setPublishedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->published_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->published_at !== null && $tmpDt = new DateTime($this->published_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->published_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = sfSimpleBlogPostPeer::PUBLISHED_AT;
			}
		} // if either are not null

		return $this;
	} // setPublishedAt()

	/**
	 * Sets the value of [internal_published_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     sfSimpleBlogPost The current object (for fluent API support)
	 */
	public function setInternalPublishedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->internal_published_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->internal_published_at !== null && $tmpDt = new DateTime($this->internal_published_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->internal_published_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = sfSimpleBlogPostPeer::INTERNAL_PUBLISHED_AT;
			}
		} // if either are not null

		return $this;
	} // setInternalPublishedAt()

	/**
	 * Set the value of [version] column.
	 * 
	 * @param      int $v new value
	 * @return     sfSimpleBlogPost The current object (for fluent API support)
	 */
	public function setVersion($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->version !== $v || $this->isNew()) {
			$this->version = $v;
			$this->modifiedColumns[] = sfSimpleBlogPostPeer::VERSION;
		}

		return $this;
	} // setVersion()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->is_published !== false) {
				return false;
			}

			if ($this->allow_comments !== true) {
				return false;
			}

			if ($this->version !== 1) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->author_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->title = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->stripped_title = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->content = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->is_published = ($row[$startcol + 5] !== null) ? (boolean) $row[$startcol + 5] : null;
			$this->allow_comments = ($row[$startcol + 6] !== null) ? (boolean) $row[$startcol + 6] : null;
			$this->published_at = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->internal_published_at = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->version = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			return $startcol + 10; // 10 = sfSimpleBlogPostPeer::NUM_COLUMNS - sfSimpleBlogPostPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating sfSimpleBlogPost object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->asfGuardUser !== null && $this->author_id !== $this->asfGuardUser->getId()) {
			$this->asfGuardUser = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfSimpleBlogPostPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = sfSimpleBlogPostPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		// Reset the updated_at lazy-load column
		$this->updated_at = null;
		$this->updated_at_isLoaded = false;

		if ($deep) {  // also de-associate any related objects?

			$this->asfGuardUser = null;
			$this->collsfSimpleBlogPostCategorys = null;

			$this->collsfSimpleBlogPostVersions = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfSimpleBlogPostPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasesfSimpleBlogPost:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}

			if ($ret) {
				sfSimpleBlogPostQuery::create()
					->filterByPrimaryKey($this->getPrimaryKey())
					->delete($con);
				$this->postDelete($con);
				// luceneable behavior
				$this->deleteLuceneIndex();
				// commentable behavior
				$this->deleteComments($con);
				// versionable behavior
				
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasesfSimpleBlogPost:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$con->commit();
				$this->setDeleted(true);
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfSimpleBlogPostPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// sluggable behavior
			
			if ($this->isColumnModified(sfSimpleBlogPostPeer::STRIPPED_TITLE) && $this->getStrippedTitle()) {
				$this->setStrippedTitle($this->makeSlugUnique($this->getStrippedTitle()));
			} elseif (!$this->getStrippedTitle()) {
				$this->setStrippedTitle($this->createSlug());
			}
			// versionable behavior
			if ($this->isVersioningNecessary()) {
				$this->setVersion($this->isNew() ? 1 : $this->getLastVersionNumber($con) + 1);
				$createVersion = true; // for postSave hook
			}
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasesfSimpleBlogPost:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(sfSimpleBlogPostPeer::UPDATED_AT))
			{
				$this->setUpdatedAt(time());
			}
			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// luceneable behavior
				if ($affectedRows > 0) $this->updateLuceneIndex();
				// versionable behavior
				if (isset($createVersion)) {
					$this->addVersion($con);
				}
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasesfSimpleBlogPost:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				sfSimpleBlogPostPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->asfGuardUser !== null) {
				if ($this->asfGuardUser->isModified() || $this->asfGuardUser->isNew()) {
					$affectedRows += $this->asfGuardUser->save($con);
				}
				$this->setsfGuardUser($this->asfGuardUser);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = sfSimpleBlogPostPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$criteria = $this->buildCriteria();
					if ($criteria->keyContainsValue(sfSimpleBlogPostPeer::ID) ) {
						throw new PropelException('Cannot insert a value for auto-increment primary key ('.sfSimpleBlogPostPeer::ID.')');
					}

					$pk = BasePeer::doInsert($criteria, $con);
					$affectedRows += 1;
					$this->setId($pk);  //[IMV] update autoincrement primary key
					$this->setNew(false);
				} else {
					$affectedRows += sfSimpleBlogPostPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collsfSimpleBlogPostCategorys !== null) {
				foreach ($this->collsfSimpleBlogPostCategorys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collsfSimpleBlogPostVersions !== null) {
				foreach ($this->collsfSimpleBlogPostVersions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->asfGuardUser !== null) {
				if (!$this->asfGuardUser->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->asfGuardUser->getValidationFailures());
				}
			}


			if (($retval = sfSimpleBlogPostPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collsfSimpleBlogPostCategorys !== null) {
					foreach ($this->collsfSimpleBlogPostCategorys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collsfSimpleBlogPostVersions !== null) {
					foreach ($this->collsfSimpleBlogPostVersions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = sfSimpleBlogPostPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getAuthorId();
				break;
			case 2:
				return $this->getTitle();
				break;
			case 3:
				return $this->getStrippedTitle();
				break;
			case 4:
				return $this->getContent();
				break;
			case 5:
				return $this->getIsPublished();
				break;
			case 6:
				return $this->getAllowComments();
				break;
			case 7:
				return $this->getUpdatedAt();
				break;
			case 8:
				return $this->getPublishedAt();
				break;
			case 9:
				return $this->getInternalPublishedAt();
				break;
			case 10:
				return $this->getVersion();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 *                    Defaults to BasePeer::TYPE_PHPNAME.
	 * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
	 * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
	 * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
	 *
	 * @return    array an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
	{
		if (isset($alreadyDumpedObjects['sfSimpleBlogPost'][$this->getPrimaryKey()])) {
			return '*RECURSION*';
		}
		$alreadyDumpedObjects['sfSimpleBlogPost'][$this->getPrimaryKey()] = true;
		$keys = sfSimpleBlogPostPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getAuthorId(),
			$keys[2] => $this->getTitle(),
			$keys[3] => $this->getStrippedTitle(),
			$keys[4] => $this->getContent(),
			$keys[5] => $this->getIsPublished(),
			$keys[6] => $this->getAllowComments(),
			$keys[7] => ($includeLazyLoadColumns) ? $this->getUpdatedAt() : null,
			$keys[8] => $this->getPublishedAt(),
			$keys[9] => $this->getInternalPublishedAt(),
			$keys[10] => $this->getVersion(),
		);
		if ($includeForeignObjects) {
			if (null !== $this->asfGuardUser) {
				$result['sfGuardUser'] = $this->asfGuardUser->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->collsfSimpleBlogPostCategorys) {
				$result['sfSimpleBlogPostCategorys'] = $this->collsfSimpleBlogPostCategorys->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
			if (null !== $this->collsfSimpleBlogPostVersions) {
				$result['sfSimpleBlogPostVersions'] = $this->collsfSimpleBlogPostVersions->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
		}
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = sfSimpleBlogPostPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setAuthorId($value);
				break;
			case 2:
				$this->setTitle($value);
				break;
			case 3:
				$this->setStrippedTitle($value);
				break;
			case 4:
				$this->setContent($value);
				break;
			case 5:
				$this->setIsPublished($value);
				break;
			case 6:
				$this->setAllowComments($value);
				break;
			case 7:
				$this->setUpdatedAt($value);
				break;
			case 8:
				$this->setPublishedAt($value);
				break;
			case 9:
				$this->setInternalPublishedAt($value);
				break;
			case 10:
				$this->setVersion($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = sfSimpleBlogPostPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setAuthorId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setTitle($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setStrippedTitle($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setContent($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setIsPublished($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setAllowComments($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setUpdatedAt($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setPublishedAt($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setInternalPublishedAt($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setVersion($arr[$keys[10]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(sfSimpleBlogPostPeer::DATABASE_NAME);

		if ($this->isColumnModified(sfSimpleBlogPostPeer::ID)) $criteria->add(sfSimpleBlogPostPeer::ID, $this->id);
		if ($this->isColumnModified(sfSimpleBlogPostPeer::AUTHOR_ID)) $criteria->add(sfSimpleBlogPostPeer::AUTHOR_ID, $this->author_id);
		if ($this->isColumnModified(sfSimpleBlogPostPeer::TITLE)) $criteria->add(sfSimpleBlogPostPeer::TITLE, $this->title);
		if ($this->isColumnModified(sfSimpleBlogPostPeer::STRIPPED_TITLE)) $criteria->add(sfSimpleBlogPostPeer::STRIPPED_TITLE, $this->stripped_title);
		if ($this->isColumnModified(sfSimpleBlogPostPeer::CONTENT)) $criteria->add(sfSimpleBlogPostPeer::CONTENT, $this->content);
		if ($this->isColumnModified(sfSimpleBlogPostPeer::IS_PUBLISHED)) $criteria->add(sfSimpleBlogPostPeer::IS_PUBLISHED, $this->is_published);
		if ($this->isColumnModified(sfSimpleBlogPostPeer::ALLOW_COMMENTS)) $criteria->add(sfSimpleBlogPostPeer::ALLOW_COMMENTS, $this->allow_comments);
		if ($this->isColumnModified(sfSimpleBlogPostPeer::UPDATED_AT)) $criteria->add(sfSimpleBlogPostPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(sfSimpleBlogPostPeer::PUBLISHED_AT)) $criteria->add(sfSimpleBlogPostPeer::PUBLISHED_AT, $this->published_at);
		if ($this->isColumnModified(sfSimpleBlogPostPeer::INTERNAL_PUBLISHED_AT)) $criteria->add(sfSimpleBlogPostPeer::INTERNAL_PUBLISHED_AT, $this->internal_published_at);
		if ($this->isColumnModified(sfSimpleBlogPostPeer::VERSION)) $criteria->add(sfSimpleBlogPostPeer::VERSION, $this->version);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(sfSimpleBlogPostPeer::DATABASE_NAME);
		$criteria->add(sfSimpleBlogPostPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Returns true if the primary key for this object is null.
	 * @return     boolean
	 */
	public function isPrimaryKeyNull()
	{
		return null === $this->getId();
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of sfSimpleBlogPost (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @param      boolean $makeNew Whether to reset autoincrement PKs and make the object new.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
	{
		$copyObj->setAuthorId($this->author_id);
		$copyObj->setTitle($this->title);
		$copyObj->setStrippedTitle($this->stripped_title);
		$copyObj->setContent($this->content);
		$copyObj->setIsPublished($this->is_published);
		$copyObj->setAllowComments($this->allow_comments);
		$copyObj->setUpdatedAt($this->updated_at);
		$copyObj->setPublishedAt($this->published_at);
		$copyObj->setInternalPublishedAt($this->internal_published_at);
		$copyObj->setVersion($this->version);

		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getsfSimpleBlogPostCategorys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addsfSimpleBlogPostCategory($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getsfSimpleBlogPostVersions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addsfSimpleBlogPostVersion($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)

		if ($makeNew) {
			$copyObj->setNew(true);
			$copyObj->setId(NULL); // this is a auto-increment column, so set to default value
		}
	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     sfSimpleBlogPost Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     sfSimpleBlogPostPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new sfSimpleBlogPostPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a sfGuardUser object.
	 *
	 * @param      sfGuardUser $v
	 * @return     sfSimpleBlogPost The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setsfGuardUser(sfGuardUser $v = null)
	{
		if ($v === null) {
			$this->setAuthorId(NULL);
		} else {
			$this->setAuthorId($v->getId());
		}

		$this->asfGuardUser = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the sfGuardUser object, it will not be re-added.
		if ($v !== null) {
			$v->addsfSimpleBlogPost($this);
		}

		return $this;
	}


	/**
	 * Get the associated sfGuardUser object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     sfGuardUser The associated sfGuardUser object.
	 * @throws     PropelException
	 */
	public function getsfGuardUser(PropelPDO $con = null)
	{
		if ($this->asfGuardUser === null && ($this->author_id !== null)) {
			$this->asfGuardUser = sfGuardUserQuery::create()->findPk($this->author_id, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->asfGuardUser->addsfSimpleBlogPosts($this);
			 */
		}
		return $this->asfGuardUser;
	}

	/**
	 * Clears out the collsfSimpleBlogPostCategorys collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addsfSimpleBlogPostCategorys()
	 */
	public function clearsfSimpleBlogPostCategorys()
	{
		$this->collsfSimpleBlogPostCategorys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collsfSimpleBlogPostCategorys collection.
	 *
	 * By default this just sets the collsfSimpleBlogPostCategorys collection to an empty array (like clearcollsfSimpleBlogPostCategorys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initsfSimpleBlogPostCategorys($overrideExisting = true)
	{
		if (null !== $this->collsfSimpleBlogPostCategorys && !$overrideExisting) {
			return;
		}
		$this->collsfSimpleBlogPostCategorys = new PropelObjectCollection();
		$this->collsfSimpleBlogPostCategorys->setModel('sfSimpleBlogPostCategory');
	}

	/**
	 * Gets an array of sfSimpleBlogPostCategory objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this sfSimpleBlogPost is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array sfSimpleBlogPostCategory[] List of sfSimpleBlogPostCategory objects
	 * @throws     PropelException
	 */
	public function getsfSimpleBlogPostCategorys($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collsfSimpleBlogPostCategorys || null !== $criteria) {
			if ($this->isNew() && null === $this->collsfSimpleBlogPostCategorys) {
				// return empty collection
				$this->initsfSimpleBlogPostCategorys();
			} else {
				$collsfSimpleBlogPostCategorys = sfSimpleBlogPostCategoryQuery::create(null, $criteria)
					->filterBysfSimpleBlogPost($this)
					->find($con);
				if (null !== $criteria) {
					return $collsfSimpleBlogPostCategorys;
				}
				$this->collsfSimpleBlogPostCategorys = $collsfSimpleBlogPostCategorys;
			}
		}
		return $this->collsfSimpleBlogPostCategorys;
	}

	/**
	 * Returns the number of related sfSimpleBlogPostCategory objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related sfSimpleBlogPostCategory objects.
	 * @throws     PropelException
	 */
	public function countsfSimpleBlogPostCategorys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collsfSimpleBlogPostCategorys || null !== $criteria) {
			if ($this->isNew() && null === $this->collsfSimpleBlogPostCategorys) {
				return 0;
			} else {
				$query = sfSimpleBlogPostCategoryQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterBysfSimpleBlogPost($this)
					->count($con);
			}
		} else {
			return count($this->collsfSimpleBlogPostCategorys);
		}
	}

	/**
	 * Method called to associate a sfSimpleBlogPostCategory object to this object
	 * through the sfSimpleBlogPostCategory foreign key attribute.
	 *
	 * @param      sfSimpleBlogPostCategory $l sfSimpleBlogPostCategory
	 * @return     void
	 * @throws     PropelException
	 */
	public function addsfSimpleBlogPostCategory(sfSimpleBlogPostCategory $l)
	{
		if ($this->collsfSimpleBlogPostCategorys === null) {
			$this->initsfSimpleBlogPostCategorys();
		}
		if (!$this->collsfSimpleBlogPostCategorys->contains($l)) { // only add it if the **same** object is not already associated
			$this->collsfSimpleBlogPostCategorys[]= $l;
			$l->setsfSimpleBlogPost($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfSimpleBlogPost is new, it will return
	 * an empty collection; or if this sfSimpleBlogPost has previously
	 * been saved, it will retrieve related sfSimpleBlogPostCategorys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfSimpleBlogPost.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array sfSimpleBlogPostCategory[] List of sfSimpleBlogPostCategory objects
	 */
	public function getsfSimpleBlogPostCategorysJoinsfSimpleBlogCategory($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = sfSimpleBlogPostCategoryQuery::create(null, $criteria);
		$query->joinWith('sfSimpleBlogCategory', $join_behavior);

		return $this->getsfSimpleBlogPostCategorys($query, $con);
	}

	/**
	 * Clears out the collsfSimpleBlogPostVersions collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addsfSimpleBlogPostVersions()
	 */
	public function clearsfSimpleBlogPostVersions()
	{
		$this->collsfSimpleBlogPostVersions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collsfSimpleBlogPostVersions collection.
	 *
	 * By default this just sets the collsfSimpleBlogPostVersions collection to an empty array (like clearcollsfSimpleBlogPostVersions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initsfSimpleBlogPostVersions($overrideExisting = true)
	{
		if (null !== $this->collsfSimpleBlogPostVersions && !$overrideExisting) {
			return;
		}
		$this->collsfSimpleBlogPostVersions = new PropelObjectCollection();
		$this->collsfSimpleBlogPostVersions->setModel('sfSimpleBlogPostVersion');
	}

	/**
	 * Gets an array of sfSimpleBlogPostVersion objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this sfSimpleBlogPost is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array sfSimpleBlogPostVersion[] List of sfSimpleBlogPostVersion objects
	 * @throws     PropelException
	 */
	public function getsfSimpleBlogPostVersions($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collsfSimpleBlogPostVersions || null !== $criteria) {
			if ($this->isNew() && null === $this->collsfSimpleBlogPostVersions) {
				// return empty collection
				$this->initsfSimpleBlogPostVersions();
			} else {
				$collsfSimpleBlogPostVersions = sfSimpleBlogPostVersionQuery::create(null, $criteria)
					->filterBysfSimpleBlogPost($this)
					->find($con);
				if (null !== $criteria) {
					return $collsfSimpleBlogPostVersions;
				}
				$this->collsfSimpleBlogPostVersions = $collsfSimpleBlogPostVersions;
			}
		}
		return $this->collsfSimpleBlogPostVersions;
	}

	/**
	 * Returns the number of related sfSimpleBlogPostVersion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related sfSimpleBlogPostVersion objects.
	 * @throws     PropelException
	 */
	public function countsfSimpleBlogPostVersions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collsfSimpleBlogPostVersions || null !== $criteria) {
			if ($this->isNew() && null === $this->collsfSimpleBlogPostVersions) {
				return 0;
			} else {
				$query = sfSimpleBlogPostVersionQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterBysfSimpleBlogPost($this)
					->count($con);
			}
		} else {
			return count($this->collsfSimpleBlogPostVersions);
		}
	}

	/**
	 * Method called to associate a sfSimpleBlogPostVersion object to this object
	 * through the sfSimpleBlogPostVersion foreign key attribute.
	 *
	 * @param      sfSimpleBlogPostVersion $l sfSimpleBlogPostVersion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addsfSimpleBlogPostVersion(sfSimpleBlogPostVersion $l)
	{
		if ($this->collsfSimpleBlogPostVersions === null) {
			$this->initsfSimpleBlogPostVersions();
		}
		if (!$this->collsfSimpleBlogPostVersions->contains($l)) { // only add it if the **same** object is not already associated
			$this->collsfSimpleBlogPostVersions[]= $l;
			$l->setsfSimpleBlogPost($this);
		}
	}

	/**
	 * Clears the current object and sets all attributes to their default values
	 */
	public function clear()
	{
		$this->id = null;
		$this->author_id = null;
		$this->title = null;
		$this->stripped_title = null;
		$this->content = null;
		$this->is_published = null;
		$this->allow_comments = null;
		$this->updated_at = null;
		$this->published_at = null;
		$this->internal_published_at = null;
		$this->version = null;
		$this->alreadyInSave = false;
		$this->alreadyInValidation = false;
		$this->clearAllReferences();
		$this->applyDefaultValues();
		$this->resetModified();
		$this->setNew(true);
		$this->setDeleted(false);
	}

	/**
	 * Resets all references to other model objects or collections of model objects.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect
	 * objects with circular references (even in PHP 5.3). This is currently necessary
	 * when using Propel in certain daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all referrer objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collsfSimpleBlogPostCategorys) {
				foreach ($this->collsfSimpleBlogPostCategorys as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collsfSimpleBlogPostVersions) {
				foreach ($this->collsfSimpleBlogPostVersions as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		if ($this->collsfSimpleBlogPostCategorys instanceof PropelCollection) {
			$this->collsfSimpleBlogPostCategorys->clearIterator();
		}
		$this->collsfSimpleBlogPostCategorys = null;
		if ($this->collsfSimpleBlogPostVersions instanceof PropelCollection) {
			$this->collsfSimpleBlogPostVersions->clearIterator();
		}
		$this->collsfSimpleBlogPostVersions = null;
		$this->asfGuardUser = null;
	}

	/**
	 * Return the string representation of this object
	 *
	 * @return string The value of the 'title' column
	 */
	public function __toString()
	{
		return (string) $this->getTitle();
	}

	// sluggable behavior
	
	/**
	 * Wrap the setter for slug value
	 *
	 * @param   string
	 * @return  sfSimpleBlogPost
	 */
	public function setSlug($v)
	{
		return $this->setStrippedTitle($v);
	}
	
	/**
	 * Wrap the getter for slug value
	 *
	 * @return  string 
	 */
	public function getSlug()
	{
		return $this->getStrippedTitle();
	}
	
	/**
	 * Create a unique slug based on the object
	 *
	 * @return string The object slug
	 */
	protected function createSlug()
	{
		$slug = $this->createRawSlug();
		$slug = $this->limitSlugSize($slug);
		$slug = $this->makeSlugUnique($slug);
		
		return $slug;
	}
	
	/**
	 * Create the slug from the appropriate columns
	 *
	 * @return string
	 */
	protected function createRawSlug()
	{
		return $this->cleanupSlugPart($this->__toString());
	}
	
	/**
	 * Cleanup a string to make a slug of it
	 * Removes special characters, replaces blanks with a separator, and trim it
	 *
	 * @param     string $text      the text to slugify
	 * @param     string $separator the separator used by slug
	 * @return    string             the slugified text
	 */
	protected static function cleanupSlugPart($slug, $replacement = '-')
	{
		// transliterate
		if (function_exists('iconv')) {
			$slug = iconv('utf-8', 'us-ascii//TRANSLIT', $slug);
		}
		
		// lowercase
		if (function_exists('mb_strtolower')) {
			$slug = mb_strtolower($slug);
		} else {
			$slug = strtolower($slug);
		}
		
		// remove accents resulting from OSX's iconv
		$slug = str_replace(array('\'', '`', '^'), '', $slug);
		
		// replace non letter or digits with separator
		$slug = preg_replace('/\W+/', $replacement, $slug);
		
		// trim
		$slug = trim($slug, $replacement);
	
		if (empty($slug)) {
			return 'n-a';
		}
	
		return $slug;
	}
	
	
	/**
	 * Make sure the slug is short enough to accomodate the column size
	 *
	 * @param	string $slug			the slug to check
	 *
	 * @return string						the truncated slug
	 */
	protected static function limitSlugSize($slug, $incrementReservedSpace = 3)
	{
		// check length, as suffix could put it over maximum
		if (strlen($slug) > (245 - $incrementReservedSpace)) {
			$slug = substr($slug, 0, 245 - $incrementReservedSpace);
		}
		return $slug;
	}
	
	
	/**
	 * Get the slug, ensuring its uniqueness
	 *
	 * @param	string $slug			the slug to check
	 * @param	string $separator the separator used by slug
	 * @return string						the unique slug
	 */
	protected function makeSlugUnique($slug, $separator = '-', $increment = 0)
	{
		$slug2 = empty($increment) ? $slug : $slug . $separator . $increment;
		$slugAlreadyExists = sfSimpleBlogPostQuery::create()
			->filterBySlug($slug2)
			->prune($this)
			->count();
		if ($slugAlreadyExists) {
			return $this->makeSlugUnique($slug, $separator, ++$increment);
		} else {
			return $slug2;
		}
	}

	// luceneable behavior
	
	/**
	 * update lucene index for this class
	 * @param zend lucene index $index
	 * @return boolean
	 */
	public function updateLuceneIndex()
	{
	  $index = sfLuceneableToolkit::getLuceneIndex(get_class($this));
	
	  // remove existing entries
	  $this->deleteLuceneIndex($index);
	
	  $doc = new Zend_Search_Lucene_Document();
	  $field = Zend_Search_Lucene_Field::Keyword('pk', $this->getId(), 'utf-8');
	  $doc->addField($field);
	  $field = Zend_Search_Lucene_Field::Text('Title', $this->getTitle(), 'utf-8');
	  $field->boost = 1.8;
	  $doc->addField($field);
	  $field = Zend_Search_Lucene_Field::UnStored('Content', $this->getContent(), 'utf-8');
	  $field->boost = 1.5;
	  $doc->addField($field);
	  $field = Zend_Search_Lucene_Field::Text('TagsAsString', $this->getTagsAsString(), 'utf-8');
	  $doc->addField($field);
	
	  $index->addDocument($doc);
	  $index->commit();
	
	  return true;
	}
	
	/**
	 * delete lucene index for this class
	 * @param zend lucene index $index
	 * @return boolean
	 */
	public function deleteLuceneIndex()
	{
	  $index = sfLuceneableToolkit::getLuceneIndex(get_class($this));
	  foreach ($index->find('pk:'.$this->getId()) as $hit)
	  {
	    $index->delete($hit->id);
	  }
	
	  return true;
	}

	// commentable behavior
	
	/**
	 * Get the associated CommentCounter (sfNestedCommentableModel) object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     sfNestedCommentableModel The associated sfNestedCommentableModel object.
	 * @throws     PropelException
	 */
	public function getCommentCounter(PropelPDO $con = null)
	{
	  if ($this->aCommentCounter === null && ($this->getPrimaryKey() !== null)) {
	    $this->aCommentCounter = sfNestedCommentableModelQuery::create()->model($this)->findOne($con);
	  }
	  return $this->aCommentCounter;
	}
	  
	/**
	 * function to get the number of comments related to this sfSimpleBlogPost class
	 * @return    int
	 */
	public function getNbComments()
	{
	  return $this->getCommentCounter()->getNbComments();
	}
	
	/**
	 * function to get the number of approved comments related to this sfSimpleBlogPost class
	 * @return    int
	 */
	public function getNbApprovedComments()
	{
	  return $this->getCommentCounter()->getNbApprovedComments();
	}
	
	/**
	 * function to retrieve approved level 1 comments
	 * @param     $page page number
	 * @return    mixed
	 */
	public function getApprovedCommentsLevel1($page = null, $max_per_page = 5)
	{
	  $query = sfNestedCommentQuery::create()
	    ->approved()
	    ->level(1)
	    ->sortByCreatedAt()
	    ->model($this);
	  if (null !== $page) return $query->paginate($page, $max_per_page);
	  return $query->find();
	}
	
	/**
	 * function to retrieve approved comments
	 * @param     $page page number
	 * @return    mixed
	 */
	public function getApprovedComments($page = null, $max_per_page = 5)
	{
	  $query = sfNestedCommentQuery::create()
	    ->approved()
	    ->sortByCreatedAt()
	    ->model($this);
	  if (null !== $page) return $query->paginate($page, $max_per_page);
	  return $query->find();
	}
	
	/**
	 * function to retrieve all comments
	 * @param     $page page number
	 * @return    mixed
	 */
	public function getComments($page = null, $max_per_page = 5)
	{
	   $query = sfNestedCommentQuery::create()
	    ->sortByCreatedAt()
	    ->model($this);
	  if (null !== $page) return $query->paginate($page, $max_per_page);
	  return $query->find();
	}
	
	/**
	 * function to delete related comments
	 * @param     PropelPDO $con
	 * @return    int The number of rows affected
	 */
	public function deleteComments(PropelPDO $con)
	{
	  return sfNestedCommentQuery::create()
	    ->model($this)
	    ->doDelete($con);
	}

	// versionable behavior
	
	/**
	 * Checks whether the current state must be recorded as a version
	 *
	 * @return  boolean
	 */
	public function isVersioningNecessary($con = null)
	{
		if ($this->alreadyInSave) {
			return false;
		}
		if (sfSimpleBlogPostPeer::isVersioningEnabled() && ($this->isNew() || $this->isModified())) {
			return true;
		}
		return false;
	}
	
	/**
	 * Creates a version of the current object and saves it.
	 *
	 * @param   PropelPDO $con the connection to use
	 *
	 * @return  sfSimpleBlogPostVersion A version object
	 */
	public function addVersion($con = null)
	{
		$version = new sfSimpleBlogPostVersion();
		$version->setId($this->id);
		$version->setAuthorId($this->author_id);
		$version->setTitle($this->title);
		$version->setStrippedTitle($this->stripped_title);
		$version->setContent($this->content);
		$version->setIsPublished($this->is_published);
		$version->setAllowComments($this->allow_comments);
		$version->setUpdatedAt($this->updated_at);
		$version->setPublishedAt($this->published_at);
		$version->setInternalPublishedAt($this->internal_published_at);
		$version->setVersion($this->version);
		$version->setsfSimpleBlogPost($this);
		$version->save($con);
		
		return $version;
	}
	
	/**
	 * Sets the properties of the curent object to the value they had at a specific version
	 *
	 * @param   integer $versionNumber The version number to read
	 * @param   PropelPDO $con the connection to use
	 *
	 * @return  sfSimpleBlogPost The current object (for fluent API support)
	 */
	public function toVersion($versionNumber, $con = null)
	{
		$version = $this->getOneVersion($versionNumber, $con);
		if (!$version) {
			throw new PropelException(sprintf('No sfSimpleBlogPost object found with version %d', $version));
		}
		$this->populateFromVersion($version, $con);
		
		return $this;
	}
	
	/**
	 * Sets the properties of the curent object to the value they had at a specific version
	 *
	 * @param   sfSimpleBlogPostVersion $version The version object to use
	 * @param   PropelPDO $con the connection to use
	 *
	 * @return  sfSimpleBlogPost The current object (for fluent API support)
	 */
	public function populateFromVersion($version, $con = null)
	{
		$this->setId($version->getId());
		$this->setAuthorId($version->getAuthorId());
		$this->setTitle($version->getTitle());
		$this->setStrippedTitle($version->getStrippedTitle());
		$this->setContent($version->getContent());
		$this->setIsPublished($version->getIsPublished());
		$this->setAllowComments($version->getAllowComments());
		$this->setUpdatedAt($version->getUpdatedAt());
		$this->setPublishedAt($version->getPublishedAt());
		$this->setInternalPublishedAt($version->getInternalPublishedAt());
		$this->setVersion($version->getVersion());
		return $this;
	}
	
	/**
	 * Gets the latest persisted version number for the current object
	 *
	 * @param   PropelPDO $con the connection to use
	 *
	 * @return  integer
	 */
	public function getLastVersionNumber($con = null)
	{
		$v = sfSimpleBlogPostVersionQuery::create()
			->filterBysfSimpleBlogPost($this)
			->orderByVersion('desc')
			->findOne($con);
		if (!$v) {
			return 0;
		}
		return $v->getVersion();
	}
	
	/**
	 * Checks whether the current object is the latest one
	 *
	 * @param   PropelPDO $con the connection to use
	 *
	 * @return  Boolean
	 */
	public function isLastVersion($con = null)
	{
		return $this->getLastVersionNumber($con) == $this->getVersion();
	}
	
	/**
	 * Retrieves a version object for this entity and a version number
	 *
	 * @param   integer $versionNumber The version number to read
	 * @param   PropelPDO $con the connection to use
	 *
	 * @return  sfSimpleBlogPostVersion A version object
	 */
	public function getOneVersion($versionNumber, $con = null)
	{
		return sfSimpleBlogPostVersionQuery::create()
			->filterBysfSimpleBlogPost($this)
			->filterByVersion($versionNumber)
			->findOne($con);
	}
	
	/**
	 * Gets all the versions of this object, in incremental order
	 *
	 * @param   PropelPDO $con the connection to use
	 *
	 * @return  PropelObjectCollection A list of sfSimpleBlogPostVersion objects
	 */
	public function getAllVersions($con = null)
	{
		$criteria = new Criteria();
		$criteria->addAscendingOrderByColumn(sfSimpleBlogPostVersionPeer::VERSION);
		return $this->getsfSimpleBlogPostVersions($criteria, $con);
	}
	
	/**
	 * Gets all the versions of this object, in incremental order.
	 * <code>
	 * print_r($book->compare(1, 2));
	 * => array(
	 *   '1' => array('Title' => 'Book title at version 1'),
	 *   '2' => array('Title' => 'Book title at version 2')
	 * );
	 * </code>
	 *
	 * @param   integer   $fromVersionNumber
	 * @param   integer   $toVersionNumber
	 * @param   string    $keys Main key used for the result diff (versions|columns)
	 * @param   PropelPDO $con the connection to use
	 *
	 * @return  array A list of differences
	 */
	public function compareVersions($fromVersionNumber, $toVersionNumber, $keys = 'columns', $con = null)
	{
		$fromVersion = $this->getOneVersion($fromVersionNumber, $con)->toArray();
		$toVersion = $this->getOneVersion($toVersionNumber, $con)->toArray();
		$ignoredColumns = array(
			'Version',
		);
		$diff = array();
		foreach ($fromVersion as $key => $value) {
			if (in_array($key, $ignoredColumns)) {
				continue;
			}
			if ($toVersion[$key] != $value) {
				switch ($keys) {
					case 'versions':
						$diff[$fromVersionNumber][$key] = $value;
						$diff[$toVersionNumber][$key] = $toVersion[$key];
						break;
					default:
						$diff[$key] = array(
							$fromVersionNumber => $value,
							$toVersionNumber => $toVersion[$key],
						);
						break;
				}
			}
		}
		return $diff;
	}

	/**
	 * Catches calls to virtual methods
	 */
	public function __call($name, $params)
	{
		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BasesfSimpleBlogPost:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}

		if (preg_match('/get(\w+)/', $name, $matches)) {
			$virtualColumn = $matches[1];
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
			// no lcfirst in php<5.3...
			$virtualColumn[0] = strtolower($virtualColumn[0]);
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
		}
		return parent::__call($name, $params);
	}

} // BasesfSimpleBlogPost
