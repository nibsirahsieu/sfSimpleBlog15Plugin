<?php



/**
 * This class defines the structure of the 'sf_blog_post' table.
 *
 *
 * This class was autogenerated by Propel 1.6.0-dev on:
 *
 * Wed 26 Jan 2011 10:35:17 PM WIT
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    propel.generator.plugins.sfSimpleBlog15Plugin.lib.model.map
 */
class sfSimpleBlogPostTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'plugins.sfSimpleBlog15Plugin.lib.model.map.sfSimpleBlogPostTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('sf_blog_post');
		$this->setPhpName('sfSimpleBlogPost');
		$this->setClassname('sfSimpleBlogPost');
		$this->setPackage('plugins.sfSimpleBlog15Plugin.lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
		$this->addForeignKey('AUTHOR_ID', 'AuthorId', 'INTEGER', 'sf_guard_user', 'ID', true, null, null);
		$this->addColumn('TITLE', 'Title', 'VARCHAR', true, 255, null);
		$this->addColumn('STRIPPED_TITLE', 'StrippedTitle', 'VARCHAR', true, 245, null);
		$this->addColumn('CONTENT', 'Content', 'LONGVARCHAR', true, null, null);
		$this->addColumn('IS_PUBLISHED', 'IsPublished', 'BOOLEAN', false, null, false);
		$this->addColumn('ALLOW_COMMENTS', 'AllowComments', 'BOOLEAN', false, null, true);
		$this->addColumn('UPDATED_AT', 'UpdatedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('PUBLISHED_AT', 'PublishedAt', 'DATE', false, null, null);
		$this->addColumn('INTERNAL_PUBLISHED_AT', 'InternalPublishedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('VERSION', 'Version', 'SMALLINT', false, null, 1);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('sfGuardUser', 'sfGuardUser', RelationMap::MANY_TO_ONE, array('author_id' => 'id', ), 'CASCADE', null);
    $this->addRelation('sfSimpleBlogPostCategory', 'sfSimpleBlogPostCategory', RelationMap::ONE_TO_MANY, array('id' => 'sf_blog_post_id', ), 'CASCADE', null);
    $this->addRelation('sfSimpleBlogPostVersion', 'sfSimpleBlogPostVersion', RelationMap::ONE_TO_MANY, array('id' => 'id', ), 'CASCADE', null);
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'sluggable' => array('slug_column' => 'stripped_title', 'slug_pattern' => '', 'replace_pattern' => '/\W+/', 'replacement' => '-', 'separator' => '-', 'permanent' => 'true', ),
			'luceneable' => array('id' => 'keyword', 'title' => 'text:1.8', 'content' => 'unstored:1.5', 'tags_as_string' => 'text', ),
			'commentable' => array(),
			'versionable' => array('version_column' => 'version', 'version_table' => '', 'log_created_at' => 'false', 'log_created_by' => 'false', 'log_comment' => 'false', ),
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
			'symfony_timestampable' => array('update_column' => 'updated_at', ),
			'query_cache' => array('backend' => 'apc', 'lifetime' => '3600', ),
		);
	} // getBehaviors()

} // sfSimpleBlogPostTableMap
